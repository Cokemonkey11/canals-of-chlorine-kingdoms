package ChooseHero

import AbilityIds
import ClosureForGroups
import ErrorHandling
import HashMap
import ItemIds
import ItemObjEditing
import ObjectIds
import ObjectIdGenerator
import SoundUtils
import UnitIds

import ClassicHeroes
import ClosureTimers
import Recall
import Teams
import WhenClose
import WhenRevivable

import Mongo
import NightHowler
import Sorcerer
import SpaceCadet
import SteelElemental
import VoidAnnihilator


constant ID_STARTER_CIRCLET = compiletime(ITEM_ID_GEN.next())


@compiletime function genStarterCirclet()
    new ItemDefinition(ID_STARTER_CIRCLET, ItemIds.circletofNobility)
    ..setName("Starter Circlet")
    ..setGoldCost(20)
    ..setLumberCost(0)
    ..setAbilities(commaList(AbilityIds.allPlus1))
    ..setTooltipBasic("Starter Circlet")
    ..setTooltipExtended("Sell this item for a better one at the castle")


public constant player_heroes = new HashMap<player, unit>()
public constant all_heroes = CreateGroup()

public constant hero_sounds = new HashMap<int, SoundDefinition>()
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.paladin), new SoundDefinition(Sounds.heroPaladinPissed5))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.taurenchieftain), new SoundDefinition(Sounds.heroTaurenChieftainPissed6))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.cryptlord), new SoundDefinition(Sounds.cryptFiendPissed7))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.alchemist), new SoundDefinition(Sounds.heroAlchemistPissed11))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.bloodmage), new SoundDefinition(Sounds.bloodElfMagePissed6))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.farseer), new SoundDefinition(Sounds.heroFarseerPissed5))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.keeperofthegrove), new SoundDefinition(Sounds.keeperOfTheGrovePissed6))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.lich), new SoundDefinition(Sounds.heroLichPissed8))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.priestessofthemoon), new SoundDefinition(Sounds.heroMoonPriestessPissed6))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.darkranger), new SoundDefinition(Sounds.darkRangerPissed4))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.shadowhunter), new SoundDefinition(Sounds.shadowHunterPissed9))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.firelord), new SoundDefinition(Sounds.heroFirelordPissed11))

..put(ID_SPACE_CADET, new SoundDefinition(Sounds.peasantPissed5))
..put(ID_STEEL_ELEMENTAL, new SoundDefinition(Sounds.rockGolemPissed2))
..put(ID_VOID_ANNIHILATOR, new SoundDefinition(Sounds.acolytePissed8))
..put(ID_MONGO, new SoundDefinition(Sounds.abominationPissed6))
..put(ID_NIGHT_HOWLER, new SoundDefinition(Sounds.cryptFiendPissed7))
..put(ID_SORCERER, new SoundDefinition(Sounds.priestPissed6))


constant CUSTOM_HERO_ID_MAP = new HashMap<int, int>()
..put(UnitIds.sentryward, ID_STEEL_ELEMENTAL)
..put(UnitIds.stasistraptotem, ID_VOID_ANNIHILATOR)
..put(UnitIds.healingward, ID_SPACE_CADET)
..put(UnitIds.carrionscarab1, ID_MONGO)
..put(UnitIds.skeletalmage, ID_SORCERER)
..put(UnitIds.skeletonwarrior, ID_NIGHT_HOWLER)


init
    UnitUnitAction whenCloseStaticFn = (close, source) ->
        let where = forceWest.containsPlayer(close.getOwner()) ? players[0].getStartLocation() : players[1].getStartLocation()
        close.setPos(where)
        close.getOwner().panCameraToTimed(where, 0.)
        let hero = ReplaceUnitBJ(close, source.getTypeId(), bj_UNIT_STATE_METHOD_DEFAULTS)
        ..onRevivable() which ->
            printTimedToPlayer("You'll be revived in " + (1 + which.getLevel()).toString() + " seconds.", 10., which.getOwner())
            doAfter(1. + which.getLevel()) ->
                which.revive(where, true)
                which.getOwner().panCameraToTimed(where, 0.)

        player_heroes.put(hero.getOwner(), hero)
        all_heroes.add(hero)

        hero..addItemById(ID_STARTER_CIRCLET)..addAbility(ID_RECALL)
        if hero_sounds.has(hero.getTypeId())
            hero_sounds.get(hero.getTypeId()).playForPlayer(hero.getOwner())

    forUnitsOfPlayer(players[PLAYER_NEUTRAL_PASSIVE]) (unit u) ->
        if u.isType(UNIT_TYPE_HERO)
            if CLASSIC_HERO_ID_MAP.has(u.getTypeId())
                ReplaceUnitBJ(u, CLASSIC_HERO_ID_MAP.get(u.getTypeId()), bj_UNIT_STATE_METHOD_DEFAULTS)
                ..whenCloseStatic(whenCloseStaticFn)
            else
                nullTimer() ->
                    error("Encountered a hero that isn't initialized" + u.getTypeId().toRawCode())
        else if CUSTOM_HERO_ID_MAP.has(u.getTypeId())
            ReplaceUnitBJ(u, CUSTOM_HERO_ID_MAP.get(u.getTypeId()), bj_UNIT_STATE_METHOD_DEFAULTS)
            ..whenCloseStatic(whenCloseStaticFn)

package Bounty

import ClosureEvents
import HashMap
import SoundUtils
import StandardTextTags
import Time

import Assists
import Barracks
import Creeps
import Events
import GameBoard
import KillNotifications
import Teams


constant bounties = new HashMap<int, int>()
..put(ID_FOOTMAN, 1)
..put(ID_ARCHER, 1)
..put(ID_MORTAR_TEAM, 1)

constant HERO_BOUNTY = 10
constant HERO_ASSIST_BOUNTY = 5

constant TOWER_BOUNTY = 10

constant UNIT_EXPERIENCE_BOUNTY = 24

constant BOUNTY_DIST = 1500.

constant TOWER_DESTROYED_WARNING_SOUND = new SoundDefinition(Sounds.warning)

constant heroesToGrantExp = CreateGroup()

constant ASSIST_CUTOFF = 15..seconds()


init
    EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
        let dying_unit = EventData.getTriggerUnit()
        let killing_unit = EventData.getKillingUnit()
        let killing_player = killing_unit.getOwner()
        let dying_unit_type = dying_unit.getTypeId()
        let dying_player = dying_unit.getOwner()

        // If the unit gives bounty, give its killer the bounty.
        if bounties.has(dying_unit_type)
            if dying_player.isEnemyOf(killing_player)
                heroesToGrantExp.clear()
                for hr in all_heroes
                    if hr.isEnemyOf(dying_player) and hr.isAlive() and hr.getPos().distanceToSq(dying_unit.getPos()) < BOUNTY_DIST * BOUNTY_DIST
                        heroesToGrantExp.add(hr)

                let size = heroesToGrantExp.size()
                for hr from heroesToGrantExp
                    hr.addXp((UNIT_EXPERIENCE_BOUNTY / size).toInt(), true)

                if player_heroes.has(killing_player)
                    killing_player.addGold(bounties.get(dying_unit_type))
                    killing_player.addCreepScore()
                    createGoldBountyTextTag(dying_unit, bounties.get(dying_unit_type), killing_player)

            else if player_heroes.has(killing_player)
                standardTextTag(dying_unit.getPos(), "!")

        if dying_unit.isType(UNIT_TYPE_HERO)
            if player_heroes.has(dying_player)
                dying_player.addDeath()

            if dying_player.isEnemyOf(killing_player)
                if player_heroes.has(killing_player)
                    killing_player.addKill()
                    killing_player.addGold(HERO_BOUNTY)
                    createGoldBountyTextTag(dying_unit, HERO_BOUNTY, killing_player)
                    killing_unit.notifyKilledTarget(dying_unit)

                    dying_player.forEachAssist(killing_player, 8..seconds()) (player tt) ->
                        tt.addAssist()
                        tt.addGold(HERO_ASSIST_BOUNTY)
                        createGoldBountyTextTag(dying_unit, HERO_ASSIST_BOUNTY, tt)
                else
                    let bestAssist = dying_player.getLastPlayerAttackerSince(ASSIST_CUTOFF.ago())
                    if bestAssist.has
                        bestAssist.who.addKill()
                        bestAssist.who.addGold(HERO_BOUNTY)
                        createGoldBountyTextTag(dying_unit, HERO_BOUNTY, bestAssist.who)
                        player_heroes.get(bestAssist.who).notifyKilledTarget(dying_unit)

                        dying_player.forEachAssist(bestAssist.who, 8..seconds()) (player tt) ->
                            tt.addAssist()
                            tt.addGold(HERO_ASSIST_BOUNTY)
                            createGoldBountyTextTag(dying_unit, HERO_ASSIST_BOUNTY, tt)
                    else
                        killing_unit.notifyKilledTarget(dying_unit)
            else
                killing_unit.notifyKilledTarget(dying_unit)

        if dying_unit_type == ID_CANNON_TOWER
            dying_player.eventTowerDeath()

            siegeQueue.add(ID_MORTAR_TEAM)
            for pl in dying_player.getForce().opposingForce()
                createGoldBountyTextTag(dying_unit, TOWER_BOUNTY, pl)
                pl.addGold(TOWER_BOUNTY)
            for pl in dying_player.getForce()
                printTimedToPlayer("Your tower was destroyed.", 30., pl)
                TOWER_DESTROYED_WARNING_SOUND.playForPlayer(pl)

package Barracks

import ClosureTimers
import ClosureForGroups
import LinkedList
import TerrainUtils
import UnitIds

import Creeps
import Teams


public constant siegeQueue = new LinkedList<int>
public constant westFootmanRegion = CreateRegion()
public constant eastFootmanRegion = CreateRegion()


class RaxData
    vec2 raxPos
    vec2 spawnPos
    vec2 targetPos
    unit rax
    player owner
    bool isAlive
    unit oppositeRax
    bool spawnCaptain

    construct(unit rax)
        this.rax = rax
        this.owner = rax.getOwner()
        this.raxPos = this.rax.getPos()

        let offsetMultiplier = forceWest.containsPlayer(rax.getOwner()) ? 1. : -1.
        this.spawnPos = this.raxPos + vec2(500. * offsetMultiplier, 0.)
        this.targetPos = this.spawnPos + vec2(12000. * offsetMultiplier, 0.)
        this.isAlive = true
        this.oppositeRax = null
        this.spawnCaptain = false


init
    let raxes = new LinkedList<RaxData>()

    forUnitsAll((u) -> begin
        if u.getTypeId() == UnitIds.footman
            (u.getOwner() == players[0] ? westFootmanRegion : eastFootmanRegion).addRect(u.getPos().withRadiusRect(500.))
            raxes.add(new RaxData(ReplaceUnitBJ(u, UnitIds.arcanesanctum, bj_UNIT_STATE_METHOD_DEFAULTS)))
    end)

    for rax_ii in raxes
        for rax_jj in raxes
            if rax_ii.owner != rax_jj.owner and (rax_ii.rax.getPos().y - rax_jj.rax.getPos().y).abs() < 500.
                rax_ii.oppositeRax = rax_jj.rax
                rax_jj.oppositeRax = rax_ii.rax

    CreateTrigger()
    ..registerEnterRegion(westFootmanRegion, null)
    ..registerEnterRegion(eastFootmanRegion, null)
    ..addAction() ->
        let tu = GetEnteringUnit()
        if tu.getOwner() == players[0] and tu.getPos().x > 0.
            let pos = players[1].getStartLocation()
            tu..updateCreepTarget(pos.getTile())..issuePointOrder("attack", pos)
        else if tu.getOwner() == players[1] and tu.getPos().x < 0.
            let pos = players[0].getStartLocation()
            tu..updateCreepTarget(pos.getTile())..issuePointOrder("attack", pos)

    doAfter(30) ->
        doPeriodically(30., (_cb) -> begin
            let typOrNull = siegeQueue.pop()
            for rax in raxes
                if not rax.spawnCaptain and (rax.oppositeRax == null or rax.oppositeRax.getTypeId() == 0 or not rax.oppositeRax.isAlive())
                    rax.spawnCaptain = true

                if rax.spawnCaptain
                    createUnit(rax.owner, ID_CAPTAIN, rax.spawnPos)
                        ..updateCreepTarget(rax.targetPos.getTile())
                        ..issuePointOrder("attack", rax.targetPos)

                doPeriodicallyCounted(0.5, 3) (CallbackCounted cb) ->
                    createUnit(rax.owner, ID_FOOTMAN, rax.spawnPos)
                        ..updateCreepTarget(rax.targetPos.getTile())
                        ..issuePointOrder("attack", rax.targetPos)

                doAfter(3 * 0.5) ->
                    doPeriodicallyCounted(0.5, 3) (CallbackCounted cb) ->
                        createUnit(rax.owner, ID_ARCHER, rax.spawnPos)
                            ..updateCreepTarget(rax.targetPos.getTile())
                            ..issuePointOrder("attack", rax.targetPos)

                if typOrNull != 0
                    doAfter(7 * 0.5) ->
                        createUnit(rax.owner, typOrNull, rax.spawnPos)
                            ..updateCreepTarget(rax.targetPos.getTile())
                            ..issuePointOrder("attack", rax.targetPos)
        end)

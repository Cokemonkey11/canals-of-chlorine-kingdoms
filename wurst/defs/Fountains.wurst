package Fountains

import AbilityObjEditing
import ClosureForGroups
import LinkedList
import ObjectIdGenerator
import UnitAnimations
import UnitIds

constant ID_FOUNTAIN_LIFE_REGENERATION = compiletime(ABIL_ID_GEN.next())

constant ID_FOUNTAIN_MANA_REGENERATION = compiletime(ABIL_ID_GEN.next())


@compiletime function gen()
    new AbilityDefinitionAuraRegenerationHealingWard(ID_FOUNTAIN_LIFE_REGENERATION)
    ..presetTargetsAllowed((int lvl) -> "ground,air,organic,vuln,invu,friend,neutral")
    ..presetPercentage(lvl -> true)
    ..presetAmountofHitPointsRegenerated((int lvl) -> .02)

    new AbilityDefinitionNeutralRegenmanaonly(ID_FOUNTAIN_MANA_REGENERATION)
    ..presetTargetsAllowed((int lvl) -> "ground,air,organic,vuln,invu,friend,neutral")
    ..presetPercentage(lvl -> true)
    ..presetAmountRegenerated((int lvl) -> .02)


init
    asList(players[0], players[1]).forEach() (player player_) ->
        forUnitsOfPlayer(player_) (unit u) ->
            if u.getTypeId() == UnitIds.purplefountain
                u..removeAbility(AbilityIds.manaRegeneration)..removeAbility(AbilityIds.lifeRegenerationAura)
                ..addAbility(ID_FOUNTAIN_LIFE_REGENERATION)..addAbility(ID_FOUNTAIN_MANA_REGENERATION)
                ..setAnimation(UnitAnimations.FountainOfPower.morphThird.idx)

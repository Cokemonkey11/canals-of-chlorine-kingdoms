package ChooseHero

import ClosureEvents
import DialogBox
import HashMap
import ItemIds
import ItemObjEditing
import SoundUtils
import Time
import UnitIds

import Castles
import ClosureTimers
import Recall
import WhenClose
import WhenRevivable
import Events
import Teams
import Flash
import GameBoard

import AbilityTooltipGenerator

import CentaurWorldbender
import GoblinBloodbomber
import Headbanger
import MolotovCockatiel
import Mongo
import NightHowler
import Sorcerer
import SpaceCadet
import SteelElemental
import TaurenGladiator
import VoidAnnihilator


constant ID_STARTER_CIRCLET = compiletime(ITEM_ID_GEN.next())

constant ID_CLICK_STARTER_CIRCLET = compiletime(ABIL_ID_GEN.next())

constant ID_CIRCLE = compiletime(UNIT_ID_GEN.next())


@compiletime function gen()
    new AbilityDefinitionItemHealAoe(ID_CLICK_STARTER_CIRCLET)
    ..presetHitPointsGained((int lvl) -> 0)
    ..setArtTarget("")

    new ItemDefinition(ID_STARTER_CIRCLET, ItemIds.circletofNobility)
    ..setName("Starter Circlet")
    ..setGoldCost(10)
    ..setLumberCost(0)
    ..setPerishable(true)
    ..setNumberofCharges(1)
    ..setClassification("Charged")
    ..setAbilities(commaList(ID_CLICK_STARTER_CIRCLET, AbilityIds.allPlus1))
    ..setTooltipBasic("Starter Circlet")
    ..setTooltipExtended("Click this item to transform it into a better one.".color(COLOR_GOLD))
    ..setActivelyUsed(true)

    new BuildingDefinition(ID_CIRCLE, UnitIds.circleofpower)
    ..setPathingMap("")


public constant hero_sounds = new HashMap<int, SoundDefinition>()
..put(ID_SPACE_CADET, new SoundDefinition(Sounds.peasantPissed5))
..put(ID_STEEL_ELEMENTAL, new SoundDefinition(Sounds.rockGolemPissed2))
..put(ID_VOID_ANNIHILATOR, new SoundDefinition(Sounds.acolytePissed8))
..put(ID_MONGO, new SoundDefinition(Sounds.abominationPissed6))
..put(ID_NIGHT_HOWLER, new SoundDefinition(Sounds.cryptFiendPissed7))
..put(ID_HEADBANGER, new SoundDefinition(Sounds.headHunterPissed5))
..put(ID_SORCERER, new SoundDefinition(Sounds.priestPissed6))
..put(ID_MOLOTOV_COCKATIEL, new SoundDefinition(Sounds.hippogryphWithRiderPissed4))
..put(ID_TAUREN_GLADIATOR, new SoundDefinition(Sounds.heroTaurenChieftainPissed6))
..put(ID_CENTAUR_WORLDBENDER, new SoundDefinition(Sounds.centaurArcherPissed2))
..put(ID_GOBLIN_BLOODBOMBER, new SoundDefinition(Sounds.goblinSapperPissed7))


constant CUSTOM_HERO_ID_MAP = new IterableMap<int, int>()
..put(ID_SPACE_CADET, 0)
..put(ID_NIGHT_HOWLER, 0)
..put(ID_HEADBANGER, 0)
..put(ID_GOBLIN_BLOODBOMBER, 0)

..put(ID_STEEL_ELEMENTAL, 1)
..put(ID_TAUREN_GLADIATOR, 1)
..put(ID_MONGO, 1)

..put(ID_VOID_ANNIHILATOR, 2)
..put(ID_SORCERER, 2)
..put(ID_MOLOTOV_COCKATIEL, 2)
..put(ID_CENTAUR_WORLDBENDER, 2)

constant tmpOffsetsBuffer = [0..asAngleDegrees(), 0..asAngleDegrees(), 0..asAngleDegrees()]

constant HERO_INFO = new HashMap<int, string>()
..put(ID_SPACE_CADET, "Ranged carry, can cast divine shield. Abilities mostly augment basic attack.")
..put(ID_NIGHT_HOWLER, "Ranged carry, can instagib low-health targets.")
..put(ID_HEADBANGER, "Ranged carry, can throw long-ranged spears.")
..put(ID_GOBLIN_BLOODBOMBER, "Ranged carry, can juggle blood bombs to sustain health.")

..put(ID_STEEL_ELEMENTAL, "Bursty tank, can dash and multi-stomp.")
..put(ID_TAUREN_GLADIATOR, "Bruiser tank, can leap and stun starting at level 1.")
..put(ID_MONGO, "Supportive tank, can hook enemies.")

..put(ID_SORCERER, "Scaling caster, can multi-cast with abilities that deal scaling damage.")
..put(ID_MOLOTOV_COCKATIEL, "Agile caster, can dash and retreat with some setup.")
..put(ID_VOID_ANNIHILATOR, "Supportive caster, can teleport and lock down enemies with a skillshot.")
..put(ID_CENTAUR_WORLDBENDER, "Disurptive caster, can zone, silence, and levitate enemies.")


function unit.printInfoForPlayer(player forWhom)
    if not HERO_INFO.has(this.getTypeId())
        Log.warn("Tried to query info about " + this.getName())
        return

    let message = this.getName().color(COLOR_GOLD) + ": " + HERO_INFO.get(this.getTypeId())

    printTimedToPlayerClear(message, 30., forWhom)


public function onSelectionStatic(unit chooser, unit source)
    let where = forceWest.containsPlayer(chooser.getOwner()) ? players[0].getStartLocation() : players[1].getStartLocation()
    chooser.setPos(where)
    chooser.getOwner()..panCameraToTimed(where, 0.)
    chooser.getOwner().updateBoardIcon(source.getIcon())

    if localPlayer == chooser.getOwner()
        ClearTextMessages()

    let hero = ReplaceUnitBJ(chooser, source.getTypeId(), bj_UNIT_STATE_METHOD_DEFAULTS)
    ..onRevivable() which ->
        let owner = which.getOwner()
        let reviveDuration = (2. + which.getLevel()).seconds()
        let reviveWhen = reviveDuration.fromNow()
        printTimedToPlayer("You'll be revived in " + (reviveDuration.seconds.toInt()).toString() + " seconds.", reviveDuration.seconds, owner)
        owner.updateReviveInCell(reviveWhen)
        doPeriodicallyTimed(1., reviveDuration.seconds + 1.) cb ->
            owner.updateReviveInCell(reviveWhen)
        doAfter(reviveDuration.seconds) ->
            if owner.isIngame() and which.getTypeId() != 0
                which..revive(where, true)..setInvulnerable(true)..setMana(which.getMaxMana())
                owner.panCameraToTimed(where, 0.)
                doAfter(3.) ->
                    which.setInvulnerable(false)

    hero.getOwner()..selectSingle(hero)

    player_heroes.put(hero.getOwner(), hero)
    hero.setProperName(hero.getOwner().getName(true))
    all_heroes.add(hero)

    chooser.getOwner()..eventChooseHero(hero)

    hero..addItemById(ID_STARTER_CIRCLET)..addAbility(ID_RECALL)..addAbility(ID_FLASH)..makeAbilityPermanent(ID_RECALL, true)..makeAbilityPermanent(ID_FLASH, true)
    if hero_sounds.has(hero.getTypeId())
        hero_sounds.get(hero.getTypeId()).playForPlayer(hero.getOwner())


init
    UnitUnitAction whenCloseStaticFn = (unit close, unit source) ->
        source.printInfoForPlayer(close.getOwner())

    CUSTOM_HERO_ID_MAP.forEach() (integer heroTypeId, integer roleIndex) ->
        let offsets = tmpOffsetsBuffer[roleIndex]
        tmpOffsetsBuffer[roleIndex] = offsets + 20..asAngleDegrees()

        let angle_ = 0..asAngleDegrees() + (360..asAngleDegrees() / 3) * roleIndex.toReal() + offsets
        let pos = players[2].getStartLocation().polarOffset(angle_, 128. * 5.)
        let innerPos = players[2].getStartLocation().polarOffset(angle_, 128. * 4.)
        let xx = createUnit(players[PLAYER_NEUTRAL_PASSIVE], heroTypeId, pos, pos.angleTo(players[2].getStartLocation()))
        createUnit(players[PLAYER_NEUTRAL_PASSIVE], ID_CIRCLE, innerPos, innerPos.angleTo(players[2].getStartLocation()))
            ..setXY(innerPos)
            ..whenCloseStatic(150., (unit close, unit source) -> whenCloseStaticFn.run(close, xx))

    EventListener.onCast(ID_CLICK_STARTER_CIRCLET) caster ->
        let dBox = new DialogBox("Choose your starter item")
        dBox.addButton("Ring (+3 int)") ->
            caster.addItemById(ID_RING)
            destroy dBox

        dBox.addButton("Socks (+3 agi)") ->
            caster.addItemById(ID_SOCKS)
            destroy dBox

        dBox.addButton("Pig (+3 str)") ->
            caster.addItemById(ID_PIG)
            destroy dBox

        dBox.addButton("Gem (+250 mana)") ->
            caster.addItemById(ID_GEM)
            destroy dBox

        dBox.addButton("Amulet (+50% mana regeneration)") ->
            caster.addItemById(ID_AMULET)
            destroy dBox

        dBox.addButton("Hat (+3 armor)") ->
            caster.addItemById(ID_HAT)
            destroy dBox

        dBox.display(caster.getOwner(), true)

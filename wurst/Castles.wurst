package Castles

import AbilityObjEditing
import ClosureEvents
import ClosureTimers
import Icons
import ItemIds
import ItemObjEditing
import Time
import ObjectIds
import ObjectIdGenerator
import UnitIds

import Teams


constant ID_100_INT = compiletime(ABIL_ID_GEN.next())
constant ID_100_AGI = compiletime(ABIL_ID_GEN.next())
constant ID_100_STR = compiletime(ABIL_ID_GEN.next())
constant ID_100_DMG = compiletime(ABIL_ID_GEN.next())
constant ID_20_MOVESPEED = compiletime(ABIL_ID_GEN.next())
constant ID_2500_HP = compiletime(ABIL_ID_GEN.next())
constant ID_1000_HP = compiletime(ABIL_ID_GEN.next())
constant ID_40_INT = compiletime(ABIL_ID_GEN.next())
constant ID_40_AGI = compiletime(ABIL_ID_GEN.next())
constant ID_40_STR = compiletime(ABIL_ID_GEN.next())
constant ID_30PCT_AS = compiletime(ABIL_ID_GEN.next())
constant ID_10_ARMOR = compiletime(ABIL_ID_GEN.next())

constant ID_CASTLE = compiletime(UNIT_ID_GEN.next())

public constant ID_RING = compiletime(ITEM_ID_GEN.next()) // Intelligence
public constant ID_SOCKS = compiletime(ITEM_ID_GEN.next()) // Agility
public constant ID_PIG = compiletime(ITEM_ID_GEN.next()) // Strength
public constant ID_GEM = compiletime(ITEM_ID_GEN.next()) // Mana
public constant ID_AMULET = compiletime(ITEM_ID_GEN.next()) // Mana regen
public constant ID_HAT = compiletime(ITEM_ID_GEN.next()) // Armor

constant ID_GLOBE = compiletime(ITEM_ID_GEN.next()) // Intelligence
constant ID_SHOES = compiletime(ITEM_ID_GEN.next()) // Agility
constant ID_HELMET = compiletime(ITEM_ID_GEN.next()) // Strength
public constant ID_GRINDCORE = compiletime(ITEM_ID_GEN.next()) // AD + lifesteal
constant ID_EXASPERATION = compiletime(ITEM_ID_GEN.next()) // AD + spell shield
constant ID_WINDRUNNER = compiletime(ITEM_ID_GEN.next()) // AD + movespeed
constant ID_RAIDBOSS = compiletime(ITEM_ID_GEN.next()) // 2500 HP
constant ID_HOLY_TRINITY = compiletime(ITEM_ID_GEN.next()) // 40 int, agi, and str
public constant ID_DECIMATOR = compiletime(ITEM_ID_GEN.next()) // 30% AS, 10% lifesteal, 2% max-hp on-hit
public constant ID_EXECUTIONER = compiletime(ITEM_ID_GEN.next()) // AD + execute effect
constant ID_NATURAL_FORCE = compiletime(ITEM_ID_GEN.next()) // 1000 HP, 10 armor, 10 movepseed

public constant ID_EXASPERATION_SPELL_SHIELD = 'ANss'
public constant EXASPERATION_SPELL_SHIELD_COOLDOWN = 40.

unit array castles


class BaseItem extends ItemDefinition
    construct(int id, int buttonPosX, int buttonPosY, string icon, string name, string description)
        super(id, ItemIds.lionsRing)
        setGoldCost(10)
        setLumberCost(0)
        setAbilities("")
        setButtonPositionX(buttonPosX)
        setButtonPositionY(buttonPosY)
        setInterfaceIcon(icon)
        setName(name)
        setDescription(description)
        setTooltipBasic(name)
        setTooltipExtended(description)
        setStockMaximum(1)
        setStockReplenishInterval(0)


class ExpensiveItem extends BaseItem
    construct(int id, int buttonPosX, int buttonPosY, string icon, string name, string description)
        super(id, buttonPosX, buttonPosY, icon, name, description)
        setGoldCost(100)


@compiletime function genCastleAndItems()
    new AbilityDefinitionIntelligenceBonusPlus1(ID_100_INT)
    ..setIntelligenceBonus(1, 100)
    new AbilityDefinitionAgilityBonusPlus1(ID_100_AGI)
    ..setAgilityBonus(1, 100)
    new AbilityDefinitionAgilityBonusPlus1(ID_100_STR)
    ..setStrengthBonus(1, 100)
    new AbilityDefinitionIntelligenceBonusPlus1(ID_40_INT)
    ..setIntelligenceBonus(1, 40)
    new AbilityDefinitionAgilityBonusPlus1(ID_40_AGI)
    ..setAgilityBonus(1, 40)
    new AbilityDefinitionAgilityBonusPlus1(ID_40_STR)
    ..setStrengthBonus(1, 40)
    new AbilityDefinitionAttackSpeedIncrease(ID_30PCT_AS)
    ..setAttackSpeedIncrease(1, .3)
    new AbilityDefinitionDefenseBonusPlus1(ID_10_ARMOR)
    ..setDefenseBonus(1, 10)
    new AbilityDefinitionAttackBonusPlus1(ID_100_DMG)
    ..setAttackBonus(1, 100)
    new AbilityDefinitionMoveSpeedBonus(ID_20_MOVESPEED)
    ..setMovementSpeedBonus(1, 20)
    new AbilityDefinitionMaxLifeBonusGreater(ID_2500_HP)
    ..setMaxLifeGained(1, 2500)
    new AbilityDefinitionMaxLifeBonusGreater(ID_1000_HP)
    ..setMaxLifeGained(1, 1000)

    new BaseItem(ID_RING, 0, 0, Icons.bTNGoldRing, "Ring", "Provides 3 bonus int")
    ..setAbilities(commaList(AbilityIds.intelligenceBonusPlus3))

    new BaseItem(ID_SOCKS, 0, 1, Icons.bTNSlippersOfAgility, "Socks", "Provides 3 bonus agi")
    ..setAbilities(commaList(AbilityIds.agilityBonusPlus3))

    new BaseItem(ID_PIG, 0, 2, Icons.bTNPig, "Pig", "Provides 3 bonus str")
    ..setAbilities(commaList(AbilityIds.strengthBonusPlus3))

    new BaseItem(ID_GEM, 1, 0, Icons.bTNGem, "Gem", "Provides bonus mana")
    ..setAbilities(commaList(AbilityIds.maxManaBonusMost))

    new BaseItem(ID_AMULET, 1, 1, Icons.bTNAmulet, "Amulet", "Provides bonus mana regen")
    ..setAbilities(commaList(AbilityIds.itemManaRegeneration))

    new BaseItem(ID_HAT, 1, 2, Icons.bTNHelmutPurple, "Hat", "Provides bonus armor")
    ..setAbilities(commaList(AbilityIds.defenseBonusPlus3))

    // Expensive items

    new ExpensiveItem(ID_GLOBE, 0, 0, Icons.bTNCrystalBall, "Globe", "Provides 100 bonus int")
    ..setAbilities(commaList(ID_100_INT))

    new ExpensiveItem(ID_SHOES, 0, 1, Icons.bTNBoots, "Shoes", "Provides 100 bonus agi")
    ..setAbilities(commaList(ID_100_AGI))

    new ExpensiveItem(ID_HELMET, 0, 2, Icons.bTNHelmOfValor, "Helmet", "Provides 100 bonus str")
    ..setAbilities(commaList(ID_100_STR))

    new ExpensiveItem(ID_GRINDCORE, 1, 0, Icons.bTNOrcMeleeUpThree, "Grindcore", "Provides 100 attack damage and 25% lifesteal")
    ..setAbilities(commaList(ID_100_DMG))

    new ExpensiveItem(
        ID_EXASPERATION,
        1,
        1,
        Icons.bTNArcaniteRanged,
        "Exasperation",
        "Provides 100 attack damage and a spell shield every " + EXASPERATION_SPELL_SHIELD_COOLDOWN.toInt().toString() + " seconds"
    )
    ..setAbilities(commaList(ID_EXASPERATION_SPELL_SHIELD, ID_100_DMG))

    new ExpensiveItem(ID_WINDRUNNER, 1, 2, Icons.bTNWindSerpent, "Windrunner", "Provides 100 attack damage and 20 movement speed")
    ..setAbilities(commaList(ID_100_DMG, ID_20_MOVESPEED))

    new ExpensiveItem(ID_RAIDBOSS, 2, 0, Icons.bTNMoonArmor, "Raid Boss", "Provides 2500 hit points")
    ..setAbilities(commaList(ID_2500_HP))

    new ExpensiveItem(ID_HOLY_TRINITY, 2, 1, Icons.bTN3M3, "Holy Trinity", "Provides 40 bonus int, agi, and str")
    ..setAbilities(commaList(ID_40_AGI, ID_40_INT, ID_40_STR))

    new ExpensiveItem(ID_DECIMATOR, 2, 2, Icons.bTNClawsOfAttack, "Decimator", "Provides 30% attack speed, 10% life steal, and attacks deal an additional 2% of the target's max HP on-hit.")
    ..setAbilities(commaList(ID_30PCT_AS))

    new ExpensiveItem(ID_EXECUTIONER, 3, 0, Icons.bTNOrcMeleeUpTwo, "Executioner", "Provides 100 attack damage and causes attacks to slay the target if left with less than 5% of their maximum HP.")
    ..setAbilities(commaList(ID_100_DMG))

    new ExpensiveItem(ID_NATURAL_FORCE, 3, 1, Icons.bTNStone, "Natural Force", "Provides 1000 hit points, 10 armor, and 20 movement speed")
    ..setAbilities(commaList(ID_1000_HP, ID_10_ARMOR, ID_20_MOVESPEED))

    new BuildingDefinition(ID_CASTLE, UnitIds.castle)
    ..setHitPointsMaximumBase(5000) // Default is 2500
    ..setHitPointsRegenerationRate(1)
    ..setNormalAbilities(commaList(AbilityIds.shopSharingAlliedBldg, AbilityIds.shopPurchaseItem))
    ..setItemsMade(
        commaList(
            ID_GLOBE,
            ID_SHOES,
            ID_HELMET,

            ID_GRINDCORE,
            ID_EXASPERATION,
            ID_WINDRUNNER,

            ID_RAIDBOSS,
            ID_HOLY_TRINITY,
            ID_DECIMATOR,

            ID_EXECUTIONER,
            ID_NATURAL_FORCE
        )
    )

function unit.registerDeath(code func)
    CreateTrigger()..registerUnitEvent(this, EVENT_UNIT_DEATH)..addAction(func)


init
    BlzChangeMinimapTerrainTex("minimap.blp")
    SetMapFlag(MAP_LOCK_RESOURCE_TRADING, true)

    // Hide the upkeep tooltip
    BlzFrameGetChild(BlzGetFrameByName("ResourceBarFrame", 0), 2).hide()

    for i = 0 to 1
        castles[i] = createUnit(players[i], ID_CASTLE)
        ..setInvulnerable(true)
        ..setPos(players[i].getStartLocation())
        ..registerDeath() ->
            let dyingUnitOwnerId = GetDyingUnit().getOwner().getId()
            print("The game ended after " + instantNow().displayVerbose())
            PauseGame(true)

            doAfter(10.) ->
                if dyingUnitOwnerId == 0
                    for pl in forceWest
                        RemovePlayer(pl, PLAYER_GAME_RESULT_DEFEAT)
                    for pl in forceEast
                        RemovePlayer(pl, PLAYER_GAME_RESULT_VICTORY)
                else
                    for pl in forceWest
                        RemovePlayer(pl, PLAYER_GAME_RESULT_VICTORY)
                    for pl in forceEast
                        RemovePlayer(pl, PLAYER_GAME_RESULT_DEFEAT)

                EndGame(true)

    EventListener.add(EVENT_PLAYER_UNIT_DEATH) ->
        let dyingUnit = EventData.getDyingUnit()
        if dyingUnit.getTypeId() == UnitIds.arcanesanctum
            castles[dyingUnit.getOwner().getId()].setInvulnerable(false)

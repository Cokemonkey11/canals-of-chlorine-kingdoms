package Castles

import AbilityObjEditing
import ClosureTimers
import Icons
import ItemIds
import ItemObjEditing
import Time
import ObjectIds
import ObjectIdGenerator
import UnitIds

import Teams


constant ID_100_INT = compiletime(ABIL_ID_GEN.next())
constant ID_100_AGI = compiletime(ABIL_ID_GEN.next())
constant ID_100_STR = compiletime(ABIL_ID_GEN.next())
constant ID_100_DMG = compiletime(ABIL_ID_GEN.next())

constant ID_CASTLE = compiletime(UNIT_ID_GEN.next())

constant ID_RING = compiletime(ITEM_ID_GEN.next()) // Intelligence
constant ID_SOCKS = compiletime(ITEM_ID_GEN.next()) // Agility
constant ID_PIG = compiletime(ITEM_ID_GEN.next()) // Strength
constant ID_GEM = compiletime(ITEM_ID_GEN.next()) // Mana
constant ID_AMULET = compiletime(ITEM_ID_GEN.next()) // Mana regen
constant ID_HAT = compiletime(ITEM_ID_GEN.next()) // Armor

constant ID_GLOBE = compiletime(ITEM_ID_GEN.next()) // Intelligence
constant ID_SHOES = compiletime(ITEM_ID_GEN.next()) // Agility
constant ID_HELMET = compiletime(ITEM_ID_GEN.next()) // Strength
constant ID_GRINDCORE = compiletime(ITEM_ID_GEN.next()) // AD + lifesteal
constant ID_EXASPERATION = compiletime(ITEM_ID_GEN.next()) // AD + spell shield


class BaseItem extends ItemDefinition
    construct(int id, int buttonPosX, int buttonPosY, string icon, string name, string description)
        super(id, ItemIds.lionsRing)
        setGoldCost(10)
        setLumberCost(0)
        setAbilities("")
        setButtonPositionX(buttonPosX)
        setButtonPositionY(buttonPosY)
        setInterfaceIcon(icon)
        setName(name)
        setDescription(description)
        setTooltipBasic(name)
        setTooltipExtended(description)
        setStockMaximum(1)
        setStockReplenishInterval(0)


class ExpensiveItem extends BaseItem
    construct(int id, int buttonPosX, int buttonPosY, string icon, string name, string description)
        super(id, buttonPosX, buttonPosY, icon, name, description)
        setGoldCost(100)


@compiletime function genCastleAndItems()
    new AbilityDefinitionIntelligenceBonusPlus1(ID_100_INT)
    ..setIntelligenceBonus(1, 100)
    new AbilityDefinitionAgilityBonusPlus1(ID_100_AGI)
    ..setAgilityBonus(1, 100)
    new AbilityDefinitionAgilityBonusPlus1(ID_100_STR)
    ..setStrengthBonus(1, 100)
    new AbilityDefinitionAttackBonusPlus1(ID_100_DMG)
    ..setAttackBonus(1, 100)

    new BaseItem(ID_RING, 0, 0, Icons.bTNGoldRing, "Ring", "Provides 3 bonus int")
    ..setAbilities(commaList(AbilityIds.intelligenceBonusPlus3))

    new BaseItem(ID_SOCKS, 0, 1, Icons.bTNSlippersOfAgility, "Socks", "Provides 3 bonus agi")
    ..setAbilities(commaList(AbilityIds.agilityBonusPlus3))

    new BaseItem(ID_PIG, 0, 2, Icons.bTNPig, "Pig", "Provides 3 bonus str")
    ..setAbilities(commaList(AbilityIds.strengthBonusPlus3))

    new BaseItem(ID_GEM, 1, 0, Icons.bTNGem, "Gem", "Provides bonus mana")
    ..setAbilities(commaList(AbilityIds.maxManaBonusMost))

    new BaseItem(ID_AMULET, 1, 1, Icons.bTNAmulet, "Amulet", "Provides bonus mana regen")
    ..setAbilities(commaList(AbilityIds.itemManaRegeneration))

    new BaseItem(ID_HAT, 1, 2, Icons.bTNHelmutPurple, "Hat", "Provides bonus armor")
    ..setAbilities(commaList(AbilityIds.defenseBonusPlus3))

    new ExpensiveItem(ID_GLOBE, 2, 0, Icons.bTNCrystalBall, "Globe", "Provides 100 bonus int")
    ..setAbilities(commaList(ID_100_INT))

    new ExpensiveItem(ID_SHOES, 2, 1, Icons.bTNBoots, "Shoes", "Provides 100 bonus agi")
    ..setAbilities(commaList(ID_100_AGI))

    new ExpensiveItem(ID_HELMET, 2, 2, Icons.bTNHelmOfValor, "Helmet", "Provides 100 bonus str")
    ..setAbilities(commaList(ID_100_STR))

    new ExpensiveItem(ID_GRINDCORE, 3, 0, Icons.bTNOrcMeleeUpThree, "Grindcore", "Provides 100 attack damage and 50% lifesteal")
    ..setAbilities(commaList(AbilityIds.itemLifeSteal, ID_100_DMG))

    new ExpensiveItem(
        ID_EXASPERATION,
        3,
        1,
        Icons.bTNArcaniteRanged,
        "Exasperation",
        "Provides 100 attack damage and a spell shield every <ANss,Cool1> seconds"
    )
    ..setAbilities(commaList('ANss', ID_100_DMG))

    new BuildingDefinition(ID_CASTLE, UnitIds.castle)
    ..setNormalAbilities(commaList(AbilityIds.shopSharingAlliedBldg, AbilityIds.shopPurchaseItem))
    ..setItemsMade(
        commaList(
            ID_RING,
            ID_SOCKS,
            ID_PIG,
            ID_GEM,
            ID_AMULET,
            ID_HAT,
            ID_GLOBE,
            ID_SHOES,
            ID_HELMET,
            ID_GRINDCORE,
            ID_EXASPERATION
        )
    )

function unit.registerDeath(code func)
    CreateTrigger()..registerUnitEvent(this, EVENT_UNIT_DEATH)..addAction(func)


init
    for i = 0 to 1
        createUnit(players[i], ID_CASTLE)
        ..setPos(players[i].getStartLocation())
        ..registerDeath() ->
            let dyingUnitOwnerId = GetDyingUnit().getOwner().getId()
            print("The game ended after " + instantNow().displayVerbose())
            PauseGame(true)

            doAfter(10.) ->
                if dyingUnitOwnerId == 0
                    for pl in forceWest
                        RemovePlayer(pl, PLAYER_GAME_RESULT_DEFEAT)
                    for pl in forceEast
                        RemovePlayer(pl, PLAYER_GAME_RESULT_VICTORY)
                else
                    for pl in forceWest
                        RemovePlayer(pl, PLAYER_GAME_RESULT_VICTORY)
                    for pl in forceEast
                        RemovePlayer(pl, PLAYER_GAME_RESULT_DEFEAT)

                EndGame(true)

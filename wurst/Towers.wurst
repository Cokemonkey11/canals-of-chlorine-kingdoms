package Towers

import ClosureForGroups
import DamageEvent
import HashMap
import Reference
import SoundUtils
import Time
import UnitIds

import Creeps


constant aggroLevels = new IterableMap<unit, instant>()

constant WARNING_SOUND = new SoundDefinition(Sounds.warning)

// 800 attack range, 72 collision size of tower, 32 collision size of most heroes.
constant CANNON_TOWER_RANGE = 800. + 72. + 32.
constant CANNON_TOWER_BASE_RANGE = 800.


function unit.isAggressiveTower() returns bool
    return aggroLevels.get(this).durationSince().lessThan(duration(5.0))


function unit.tryToAcquireHeroTarget()
    let res = new Reference<unit>(null)
    forUnitsInRange(this.getPos(), CANNON_TOWER_RANGE) u ->
        if u.isAlive() and u.isEnemyOf(this.getOwner()) and u.isType(UNIT_TYPE_HERO) and not u.isInvulnerable() and IsUnitInRange(u, this, CANNON_TOWER_BASE_RANGE)
            res.val = u

    if res.val != null
        this.issueTargetOrder("attack", res.val)
        WARNING_SOUND.playForPlayer(res.val.getOwner())

    destroy res


function unit.tryToAcquireNonHeroTarget()
    let res = new Reference<unit>(null)
    forUnitsInRange(this.getPos(), CANNON_TOWER_RANGE) u ->
        if u.isAlive() and u.isEnemyOf(this.getOwner()) and not u.isType(UNIT_TYPE_HERO) and IsUnitInRange(u, this, CANNON_TOWER_BASE_RANGE)
            res.val = u

    if res.val != null
        this.issueTargetOrder("attack", res.val)

    destroy res


function unit.reevaluateAi(unit target)
    let isAggressive = this.isAggressiveTower()

    if isAggressive and not target.isType(UNIT_TYPE_HERO)
        this.tryToAcquireHeroTarget()
    else if not isAggressive and target.isType(UNIT_TYPE_HERO)
        this.tryToAcquireNonHeroTarget()


function unit.towerAi()
    aggroLevels.put(this, instantNow())

    CreateTrigger()
    ..registerUnitEvent(this, EVENT_UNIT_ACQUIRED_TARGET)
    ..addAction() ->
        let target = GetEventTargetUnit()
        let tower = GetTriggerUnit()

        tower.reevaluateAi(target)

    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_ATTACKED)
    ..addAction() ->
        let target = GetTriggerUnit()
        let tower = GetAttacker()

        if tower.getTypeId() == ID_CANNON_TOWER
            tower.reevaluateAi(target)

init
    forUnitsAll() u ->
        if u.getTypeId() == UnitIds.waterelemental1
            ReplaceUnitBJ(u, ID_CANNON_TOWER, bj_UNIT_STATE_METHOD_DEFAULTS)
            ..towerAi()

    DamageEvent.addListener(0) ->
        let target = DamageEvent.getTarget()
        let source = DamageEvent.getSource()

        if source.isEnemyOf(target) and target.isType(UNIT_TYPE_HERO) and source.isType(UNIT_TYPE_HERO)
            aggroLevels.forEach() (unit key, instant _) ->
                if key.isAlive() and key.getPos().distanceToSq(source.getPos()) < CANNON_TOWER_RANGE * CANNON_TOWER_RANGE and key.isEnemyOf(source)
                    if not key.isAggressiveTower()
                        // Tower just became aggressive.
                        key.tryToAcquireHeroTarget()
                    aggroLevels.put(key, instantNow())

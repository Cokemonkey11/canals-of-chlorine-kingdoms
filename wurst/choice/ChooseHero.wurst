package ChooseHero

import ClosureEvents
import ClosureForGroups
import DialogBox
import ErrorHandling
import HashMap
import ItemIds
import ItemObjEditing
import SoundUtils
import Time
import UnitIds

import Castles
import ClassicHeroes
import ClosureTimers
import Recall
import Teams
import WhenClose
import WhenRevivable

import AbilityTooltipGenerator

import Flash
import GameBoard
import Headbanger
import MolotovCockatiel
import Mongo
import NightHowler
import Sorcerer
import SpaceCadet
import SteelElemental
import TaurenGladiator
import VoidAnnihilator


constant ID_STARTER_CIRCLET = compiletime(ITEM_ID_GEN.next())

constant ID_CLICK_STARTER_CIRCLET = compiletime(ABIL_ID_GEN.next())


@compiletime function genStarterCirclet()
    new AbilityDefinitionItemHealAoe(ID_CLICK_STARTER_CIRCLET)
    ..presetHitPointsGained((int lvl) -> 0)
    ..setArtTarget("")

    new ItemDefinition(ID_STARTER_CIRCLET, ItemIds.circletofNobility)
    ..setName("Starter Circlet")
    ..setGoldCost(10)
    ..setLumberCost(0)
    ..setPerishable(true)
    ..setNumberofCharges(1)
    ..setClassification("Charged")
    ..setAbilities(commaList(ID_CLICK_STARTER_CIRCLET, AbilityIds.allPlus1))
    ..setTooltipBasic("Starter Circlet")
    ..setTooltipExtended("Click this item to transform it into a better one.".color(COLOR_GOLD))
    ..setActivelyUsed(true)


public constant player_heroes = new HashMap<player, unit>()
public constant all_heroes = CreateGroup()

public constant hero_sounds = new HashMap<int, SoundDefinition>()
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.paladin), new SoundDefinition(Sounds.heroPaladinPissed5))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.mountainking), new SoundDefinition(Sounds.heroMountainKingPissed7))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.cryptlord), new SoundDefinition(Sounds.cryptFiendPissed7))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.pitlord), new SoundDefinition(Sounds.pitLordYesAttack3))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.archmage), new SoundDefinition(Sounds.heroArchmagePissed4))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.farseer), new SoundDefinition(Sounds.heroFarseerPissed5))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.keeperofthegrove), new SoundDefinition(Sounds.keeperOfTheGrovePissed6))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.seawitch), new SoundDefinition(Sounds.ladyVashjPissed5))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.priestessofthemoon), new SoundDefinition(Sounds.heroMoonPriestessPissed6))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.darkranger), new SoundDefinition(Sounds.darkRangerPissed4))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.shadowhunter), new SoundDefinition(Sounds.shadowHunterPissed9))
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.firelord), new SoundDefinition(Sounds.heroFirelordPissed11))

..put(ID_SPACE_CADET, new SoundDefinition(Sounds.peasantPissed5))
..put(ID_STEEL_ELEMENTAL, new SoundDefinition(Sounds.rockGolemPissed2))
..put(ID_VOID_ANNIHILATOR, new SoundDefinition(Sounds.acolytePissed8))
..put(ID_MONGO, new SoundDefinition(Sounds.abominationPissed6))
..put(ID_NIGHT_HOWLER, new SoundDefinition(Sounds.cryptFiendPissed7))
..put(ID_HEADBANGER, new SoundDefinition(Sounds.headHunterPissed5))
..put(ID_SORCERER, new SoundDefinition(Sounds.priestPissed6))
..put(ID_MOLOTOV_COCKATIEL, new SoundDefinition(Sounds.hippogryphWithRiderPissed4))
..put(ID_TAUREN_GLADIATOR, new SoundDefinition(Sounds.heroTaurenChieftainPissed6))


constant CUSTOM_HERO_ID_MAP = new HashMap<int, int>()
..put(UnitIds.sentryward, ID_STEEL_ELEMENTAL)
..put(UnitIds.stasistraptotem, ID_VOID_ANNIHILATOR)
..put(UnitIds.healingward, ID_SPACE_CADET)
..put(UnitIds.carrionscarab1, ID_MONGO)
..put(UnitIds.skeletalmage, ID_SORCERER)
..put(UnitIds.skeletonwarrior, ID_NIGHT_HOWLER)
..put(UnitIds.bandit, ID_HEADBANGER)
..put(UnitIds.faeriedragon, ID_MOLOTOV_COCKATIEL)
..put(UnitIds.gargoylemorphed, ID_TAUREN_GLADIATOR)


constant HERO_INFO = new HashMap<int, string>()
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.paladin), "Obnoxious hero, can cast divine shield.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.mountainking), "Overpowered hero, can permastun.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.cryptlord), "Tanky hero, can stun multiple targets in a line.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.pitlord), "Tanky hero, can cast howl of terror.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.archmage), "Pushing hero, can teleport across the map.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.farseer), "Beginner-friendly hero, can cast chain lightning to farm.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.keeperofthegrove), "Unlikely hero, only really has one useful ability.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.seawitch), "Supportive hero, can slow enemies with frost arrows.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.priestessofthemoon), "Scouty hero, can summon an owl scout.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.darkranger), "Disruptive hero, can cast silence.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.shadowhunter), "Reggae hero, can cast hex.")
..put(CLASSIC_HERO_ID_MAP.get(UnitIds.firelord), "Fire hero, can fire.")

..put(ID_SPACE_CADET, "Ranged carry, can cast divine shield. Abilities mostly augment basic attack.")
..put(ID_NIGHT_HOWLER, "Ranged carry, can instagib low-health targets.")
..put(ID_HEADBANGER, "Ranged carry, can throw long-ranged spears.")

..put(ID_STEEL_ELEMENTAL, "Bursty tank, can dash and multi-stomp.")
..put(ID_TAUREN_GLADIATOR, "Bruiser tank, can leap and stun starting at level 1.")
..put(ID_MONGO, "Supportive tank, can hook enemies.")

..put(ID_SORCERER, "Scaling caster, can multi-cast with abilities that deal scaling damage.")
..put(ID_MOLOTOV_COCKATIEL, "Agile caster, can dash and retreat with some setup.")
..put(ID_VOID_ANNIHILATOR, "Supportive caster, can teleport and lock down enemies with a skillshot.")


function unit.printInfoForPlayer(player forWhom)
    if not HERO_INFO.has(this.getTypeId())
        Log.warn("Tried to query info about " + this.getName())
        return

    let message = this.getName().color(COLOR_GOLD) + ": " + HERO_INFO.get(this.getTypeId())

    printTimedToPlayerClear(message, 30., forWhom)


public function onSelectionStatic(unit chooser, unit source)
    let where = forceWest.containsPlayer(chooser.getOwner()) ? players[0].getStartLocation() : players[1].getStartLocation()
    chooser.setPos(where)
    chooser.getOwner().panCameraToTimed(where, 0.)
    chooser.getOwner().updateBoardIcon(source.getIcon())

    if localPlayer == chooser.getOwner()
        ClearTextMessages()

    let hero = ReplaceUnitBJ(chooser, source.getTypeId(), bj_UNIT_STATE_METHOD_DEFAULTS)
    ..onRevivable() which ->
        let owner = which.getOwner()
        let reviveDuration = (1. + which.getLevel()).seconds()
        let reviveWhen = reviveDuration.fromNow()
        printTimedToPlayer("You'll be revived in " + (reviveDuration.seconds.toInt()).toString() + " seconds.", 10., owner)
        owner.updateReviveInCell(reviveWhen)
        doPeriodicallyTimed(1., reviveDuration.seconds + 1.) cb ->
            owner.updateReviveInCell(reviveWhen)
        doAfter(reviveDuration.seconds) ->
            if owner.isIngame() and which.getTypeId() != 0
                which.revive(where, true)
                owner.panCameraToTimed(where, 0.)
                which.setInvulnerable(true)
                doAfter(3.) ->
                    which.setInvulnerable(false)

    player_heroes.put(hero.getOwner(), hero)
    hero.setProperName(hero.getOwner().getName(true))
    all_heroes.add(hero)

    hero..addItemById(ID_STARTER_CIRCLET)..addAbility(ID_RECALL)..addAbility(ID_FLASH)..makeAbilityPermanent(ID_RECALL, true)..makeAbilityPermanent(ID_FLASH, true)
    if hero_sounds.has(hero.getTypeId())
        hero_sounds.get(hero.getTypeId()).playForPlayer(hero.getOwner())


init
    UnitUnitAction whenCloseStaticFn = (unit close, unit source) ->
        source.printInfoForPlayer(close.getOwner())

    forUnitsOfPlayer(players[PLAYER_NEUTRAL_PASSIVE]) (unit u) ->
        if u.isType(UNIT_TYPE_HERO)
            if CLASSIC_HERO_ID_MAP.has(u.getTypeId())
                ReplaceUnitBJ(u, CLASSIC_HERO_ID_MAP.get(u.getTypeId()), bj_UNIT_STATE_METHOD_DEFAULTS)
                ..whenCloseStatic(150., whenCloseStaticFn)
            else
                nullTimer() ->
                    error("Encountered a hero that isn't initialized" + u.getTypeId().toRawCode())
        else if CUSTOM_HERO_ID_MAP.has(u.getTypeId())
            ReplaceUnitBJ(u, CUSTOM_HERO_ID_MAP.get(u.getTypeId()), bj_UNIT_STATE_METHOD_DEFAULTS)
            ..whenCloseStatic(150., whenCloseStaticFn)

    EventListener.onCast(ID_CLICK_STARTER_CIRCLET) caster ->
        let dBox = new DialogBox("Choose your starter item")
        dBox.addButton("Ring (+3 int)") ->
            caster.addItemById(ID_RING)
            destroy dBox

        dBox.addButton("Socks (+3 agi)") ->
            caster.addItemById(ID_SOCKS)
            destroy dBox

        dBox.addButton("Pig (+3 str)") ->
            caster.addItemById(ID_PIG)
            destroy dBox

        dBox.addButton("Gem (+250 mana)") ->
            caster.addItemById(ID_GEM)
            destroy dBox

        dBox.addButton("Amulet (+50% mana regeneration)") ->
            caster.addItemById(ID_AMULET)
            destroy dBox

        dBox.addButton("Hat (+3 armor)") ->
            caster.addItemById(ID_HAT)
            destroy dBox

        dBox.display(caster.getOwner(), true)

package GameBoard

import Board
import ClosureTimers
import HashMap
import LinkedList
import Time

import Teams


public constant BOARD = new Board("Stats", 0.26)

public constant PLAYER_CELLS = new HashMap<player, NamedDynamicCells>()


class NamedDynamicCells
    DynamicCellValue<string> nameCell
    DynamicCellValue<int> killsCell
    DynamicCellValue<int> deathsCell
    DynamicCellValue<int> creepScoreCell
    DynamicCellValue<instant> reviveInCell

    int kills
    int deaths
    int creepScore

    construct(player pl)
        this.nameCell = dynamicCell<string>(pl.getNameColored(true), ss -> ss)
        this.killsCell = dynamicCell<int>(0, ii -> ii.toString())
        this.deathsCell = dynamicCell<int>(0, ii -> ii.toString())
        this.creepScoreCell = dynamicCell<int>(0, ii -> ii.toString())
        this.reviveInCell = dynamicCell<instant>(instant(-60.), ii -> ii.isInTheFuture() ? (ii.durationUntil().seconds + 1).toInt().toString() : " ")

        this.kills = 0
        this.deaths = 0
        this.creepScore = 0

    function addKill()
        this.kills += 1
        this.killsCell.updateValue(this.kills)

    function addDeath()
        this.deaths += 1
        this.deathsCell.updateValue(this.deaths)

    function addCreepScore()
        this.creepScore += 1
        this.creepScoreCell.updateValue(this.creepScore)

    function updateReviveInCell(instant when)
        this.reviveInCell.updateValue(when)


function addRowForPlayer(player pl)
    let playerCells = PLAYER_CELLS.get(pl)
    BOARD.addRow()..addDynamic(playerCells.nameCell)..addDynamic(playerCells.killsCell)..addDynamic(playerCells.deathsCell)..addDynamic(playerCells.creepScoreCell)..addDynamic(playerCells.reviveInCell)


public function player.updateBoardName(string st)
    PLAYER_CELLS.get(this).nameCell.updateValue(st)


public function player.updateBoardIcon(string icon)
    PLAYER_CELLS.get(this).nameCell.updateIcon(icon)


public function player.addKill()
    PLAYER_CELLS.get(this).addKill()


public function player.addDeath()
    PLAYER_CELLS.get(this).addDeath()


public function player.addCreepScore()
    PLAYER_CELLS.get(this).addCreepScore()


public function player.updateReviveInCell(instant when)
    PLAYER_CELLS.get(this).updateReviveInCell(when)


init
    nullTimer() ->
        BOARD.getBoard().setTitle(" ")
        BOARD.columns(asList(new BoardColumn(" ", 0.4), new BoardColumn("Kills", 0.16), new BoardColumn("Deaths", 0.17), new BoardColumn("Creeps", 0.22), new BoardColumn(" ", 0.05)))

        for pl in forceWest
            if pl.isIngame()
                PLAYER_CELLS.put(pl, new NamedDynamicCells(pl))
                addRowForPlayer(pl)

        BOARD.addRow()..addCell(" ")..addCell(" ")..addCell(" ")..addCell(" ")..addCell(" ")

        for pl in forceEast
            if pl.isIngame()
                PLAYER_CELLS.put(pl, new NamedDynamicCells(pl))
                addRowForPlayer(pl)

        BOARD.show()

    doPeriodically(1.) (CallbackPeriodic cb) ->
        let theTime = instant(0.) + 1..minutes()
        let text = theTime.durationSince().lessThan(0..seconds())
            ? "Game Start in " + duration(-theTime.durationSince().seconds).displayVerbose()
            : theTime.durationSince().displayVerbose()
        BOARD.getBoard().setTitle(text)

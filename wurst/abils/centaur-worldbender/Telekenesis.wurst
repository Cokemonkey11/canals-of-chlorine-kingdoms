package Telekenesis

import Abilities
import ClosureEvents
import ClosureForGroups
import ClosureTimers
import Doodads
import DummyRecycler
import HashMap
import HashSet
import Knockback3
import LinkedListModule
import Objects
import OrderIds
import SoundUtils
import StandardTextTags
import TerrainUtils
import Time

import AbilityTooltipGenerator

import Bind
import CircleFx
import CodeDamage
import VecExtensions


public constant ID_TELEKENESIS = compiletime(ABIL_ID_GEN.next())

constant MANA_COST = 100

constant TELEKENESIS_DURATION = 3.

constant RealLevelClosure COOLDOWN_FUNCTION = lvl -> 60.

constant RealLevelClosure DAMAGE = lvl -> 100. + 50 * lvl

constant ERROR_SOUND = new SoundDefinition(Sounds.error)
constant GRUNT_SOUND = new SoundDefinition(Sounds.centaurWhat1)

constant TELEKENESIS_TARGET_UNITS = new IterableMap<unit, TelekenesisUnit>()
constant TELEKENESIS_TARGET_ROCKS = new IterableMap<unit, TelekenesisProjectile>()

constant RADIUS = 350.
constant DAMAGE_RADIUS = 125.

constant LEVITATING_FLY_HEIGHT = 300.

constant BIND_KEY_TELEKENESIS = 'btel'

constant VELOCITY = 700.

constant smartTracking = new HashSet<unit>()

constant THROW_DISTANCE = 300.


@compiletime function gen()
    let tgen = new AbilityTooltipGenerator(
        Targettype.POINTUNIT,
        "Looses a burst of energy towards the target area, knocking up loose rocks along the way. "
        + "Enemies in the target area are hoisted into the air, immobilised. "
        + "Immobilised units in this way can be thrown by the caster by right-clicking a nearby point. "
        + "Thrown units and units struck by thrown units are all damaged. "
        + "Damage stacks for targets hit multiple times."
    )
    new ChannelAbilityPreset(ID_TELEKENESIS, 3, true, tgen)
    ..setHeroAbility(true)
    ..presetButtonPosNormal(3, 2)
    ..presetButtonPosResearch(3, 0)
    ..presetHotkey("R")
    ..presetIcon(Icons.bTNGauntletsOfOgrePower)
    ..setLevelSkipRequirement(2)
    ..setRequiredLevel(6)

    ..tooltipStartListen()
    ..presetTargetTypes(Targettype.POINT)
    ..setName("Telekenesis")
    ..presetCooldown(COOLDOWN_FUNCTION)
    ..presetAreaofEffect((int lvl) -> RADIUS)
    ..addTooltipProperty("Duration", lvl -> TELEKENESIS_DURATION)
    ..addTooltipProperty("Damage", DAMAGE)
    ..presetCastRange(lvl -> 800)
    ..tooltipStopListen()

    ..presetTargetsAllowed((int lvl) -> "enemies,ground,vulnerable")
    ..presetManaCost((int lvl) -> MANA_COST)
    ..presetOption(Option.TARGETIMAGE, true)


class TelekenesisUnit
    use LinkedListModule

    unit caster
    unit target
    real timeLeft
    real timeSpent
    bool thrown
    effect fx

    construct(unit caster, unit target)
        this.caster = caster
        this.target = target
        this.timeLeft = TELEKENESIS_DURATION
        this.timeSpent = 0.
        this.thrown = false
        this.fx = addEffect(Abilities.web_AirTarget, target, "origin")

        TELEKENESIS_TARGET_UNITS.put(target, this)

        target..setPropWindow(0..asAngleDegrees())..setMoveSpeed(0.)..markBinded(BIND_KEY_TELEKENESIS)

        flashEffect(Abilities.tomeOfRetrainingCaster, target.getPos())

        if target.addAbility(HEIGHT_ENABLER)
            target.removeAbility(HEIGHT_ENABLER)

        if size == 1
            doPeriodically(ANIMATION_PERIOD) cb ->
                for inst from staticItr()
                    inst.tick()

                if size == 0
                    destroy cb

    ondestroy
        this.fx.destr()
        this.target.markUnbinded(BIND_KEY_TELEKENESIS)
        TELEKENESIS_TARGET_UNITS.remove(this.target)
        if not this.thrown
            Knockback3.setVel(this.target, 0., 0..asAngleDegrees(), 0..asAngleDegrees())

    function tick()
        this.timeLeft -= ANIMATION_PERIOD
        this.timeSpent += ANIMATION_PERIOD

        if not this.thrown and this.timeLeft > 0. and this.timeSpent < 0.5 and this.target.isAlive() and this.target.getFlyHeight() < LEVITATING_FLY_HEIGHT
            this.target.setFlyHeight(this.target.getFlyHeight() + LEVITATING_FLY_HEIGHT * 2. * ANIMATION_PERIOD, 0.)

        if this.thrown or this.timeLeft <= 0. or not this.target.isAlive()
            destroy this


class TelekenesisProjectile
    use LinkedListModule

    unit caster
    unit dummy
    real timeLeft
    real timeSpent
    bool thrown
    effect fx
    effect fx2

    construct(unit caster, vec2 pos)
        this.caster = caster
        this.dummy = DummyRecycler.get(
            pos.polarOffset(GetRandomReal(0., 360.).asAngleDegrees(), GetRandomReal(20., 40.)), 0..asAngleDegrees()
        )
            ..setFlyHeight(0., 0.)
        this.timeLeft = TELEKENESIS_DURATION
        this.timeSpent = 0.
        this.thrown = false
        this.fx = addEffect(Doodads.outland_FloatingChunks0, this.dummy, "origin")
            ..setTimeScale(0.1)
            ..setScale(GetRandomReal(0.2, 0.3))
            ..setYaw(GetRandomReal(0., 360.).asAngleDegrees())
        this.fx2 = addEffect("GeneralHeroGlow.mdl", this.dummy, "origin")..setColorByPlayer(caster.getOwner())

        TELEKENESIS_TARGET_ROCKS.put(this.dummy, this)

        if size == 1
            doPeriodically(ANIMATION_PERIOD) cb ->
                for inst from staticItr()
                    inst.tick()

                if size == 0
                    destroy cb

    ondestroy
        TELEKENESIS_TARGET_ROCKS.remove(this.dummy)
        if not this.thrown
            Knockback3.setVel(this.dummy, 0., 0..asAngleDegrees(), 0..asAngleDegrees())
            let dummy = this.dummy
            let fx = this.fx
            let fx2 = this.fx2
            doAfter(1.) ->
                DummyRecycler.recycle(dummy)
                fx.destr()
                fx2.destr()


    function tick()
        this.timeLeft -= ANIMATION_PERIOD
        this.timeSpent += ANIMATION_PERIOD

        if not this.thrown and this.timeLeft > 0. and this.timeSpent < 0.5 and this.dummy.getFlyHeight() < LEVITATING_FLY_HEIGHT
            this.dummy.setFlyHeight(this.dummy.getFlyHeight() + LEVITATING_FLY_HEIGHT * 2. * ANIMATION_PERIOD, 0.)

        if this.thrown or this.timeLeft <= 0. or not this.dummy.isAlive()
            destroy this


tuple maybe_telekenesis_unit_or_projectile(int variant, unit tu, effect tp) // 0 is empty, 1 for unit, 2 for dummy + fx


function maybe_telekenesis_unit_or_projectile.getUnit() returns unit
    if this.variant == 1
        return this.tu

    if this.variant == 2
        return this.tu

    Log.error("Tried to get the unit of a telekenesis but there was none")

    return null


function maybe_telekenesis_unit_or_projectile.cleanup()
    if this.variant == 1
        Knockback3.setVel(this.tu, 0., 0..asAngleDegrees(), 0..asAngleDegrees())
        return

    if this.variant == 2
        Knockback3.setVel(this.tu, 0., 0..asAngleDegrees(), 0..asAngleDegrees())
        let dummy = this.tu
        let fx = this.tp
        doAfter(1.) ->
            DummyRecycler.recycle(dummy)
            fx.destr()


class TelekenesisPoint
    use LinkedListModule

    unit caster
    vec2 target
    maybe_telekenesis_unit_or_projectile subject
    real damage

    construct(unit caster, vec2 target, maybe_telekenesis_unit_or_projectile subject)
        let lvl = caster.getAbilityLevel(ID_TELEKENESIS)
        this.caster = caster
        this.target = target
        this.subject = subject
        this.damage = DAMAGE.run(lvl)

        let realTarget = subject.getUnit().getPos().moveTowards(target, THROW_DISTANCE)

        Knockback3.add(subject.getUnit(), realTarget, subject.getUnit().getPos().distanceTo(realTarget) * 2.)

        if size == 1
            doPeriodically(ANIMATION_PERIOD) cb ->
                for inst from staticItr()
                    inst.tick()

                if size == 0
                    destroy cb

    ondestroy
        this.subject.cleanup()


    function tick()
        if (
            (Knockback3.getVel(this.subject.getUnit()).z < 0. and this.subject.getUnit().getFlyHeight() < 10.)
            or not this.subject.getUnit().getPos().isTerrainWalkable()
        )
            Knockback3.setVel(this.subject.getUnit(), 0., 0..asAngleDegrees(), 0..asAngleDegrees())

            addEffect(Objects.impaleTargetDust, this.subject.getUnit().getPos())..setAlpha(0)..destr()

            forUnitsInRange(this.subject.getUnit().getPos(), DAMAGE_RADIUS) uu ->
                if uu.isEnemyOf(this.caster) and uu.isAlive() and not uu.isType(UNIT_TYPE_STRUCTURE) and not uu.isInvulnerable()
                    this.caster.dealCodeDamage(uu, this.damage)
                    createCriticalStrikeTextTag(uu, this.damage.toInt())

            destroy this


class TelekenesisCast
    use LinkedListModule

    unit caster
    vec2 target
    real damage
    effect circle
    vec2 pos
    vec2 vel
    instant nextRockTime

    construct(unit caster, vec2 target)
        let lvl = caster.getAbilityLevel(ID_TELEKENESIS)
        this.caster = caster
        this.target = target
        this.damage = DAMAGE.run(lvl)
        this.circle = addEffectCircle(target, RADIUS, 2..seconds())
        this.pos = caster.getPos()
        this.vel = this.pos.normalizedPointerTo(target) * VELOCITY * ANIMATION_PERIOD
        this.nextRockTime = 0.25.secondsFromNow()

        if size == 1
            doPeriodically(ANIMATION_PERIOD) cb ->
                for inst from staticItr()
                    inst.tick()

                if size == 0
                    destroy cb

    ondestroy
        this.circle..setTimeScale(5.)..destr()

    function tick()
        this.pos += this.vel

        if this.pos.distanceToSq(this.target) < (0.5 * RADIUS) * (0.5 * RADIUS)
            flashEffect(Abilities.tomeOfRetrainingCaster, caster.getPos())
            GRUNT_SOUND.playOnPoint(this.target.withTerrainZ()).snd.setPitch(1.2)

            forUnitsInRange(this.target, RADIUS) uu ->
                if uu.isEnemyOf(this.caster) and uu.isAlive() and not uu.isType(UNIT_TYPE_STRUCTURE) and not uu.isInvulnerable()
                    new TelekenesisUnit(this.caster, uu)

            doAfter(0.5) ->
                smartTracking.add(this.caster)

            destroy this
        else if this.nextRockTime.isInThePast()
            this.nextRockTime = GetRandomReal(0.05, 0.2).secondsFromNow()

            new TelekenesisProjectile(this.caster, this.pos)


init
    EventListener.onCast(ID_TELEKENESIS) caster ->
        let point = EventData.getAbilityTargetPos()

        if not point.isVisibileToPlayer(caster.getOwner())
            ERROR_SOUND.playForPlayer(caster.getOwner())
            caster.resetAbilityCooldown(ID_TELEKENESIS)
        else
            new TelekenesisCast(caster, point)

    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
        let orderer = EventData.getTriggerUnit()
        let isSmart = EventData.getIssuedOrderId() == OrderIds.smart
        let target = EventData.getOrderPos()

        if isSmart and smartTracking.has(orderer)
            smartTracking.remove(orderer)

            TELEKENESIS_TARGET_UNITS.forEach() (unit key, TelekenesisUnit value) ->
                if value.caster == orderer
                    value.thrown = true
                    new TelekenesisPoint(orderer, target, maybe_telekenesis_unit_or_projectile(1, value.target, null))
            TELEKENESIS_TARGET_ROCKS.forEach() (unit key, TelekenesisProjectile value) ->
                if value.caster == orderer
                    value.thrown = true
                    new TelekenesisPoint(orderer, target, maybe_telekenesis_unit_or_projectile(2, value.dummy, value.fx))

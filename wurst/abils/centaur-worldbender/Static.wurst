package Static

import ClosureEvents
import ClosureForGroups
import Time

import AbilityTooltipGenerator

import MoveSpeed


public constant ID_STATIC = compiletime(ABIL_ID_GEN.next())

constant RealLevelClosure DURATION_FUNCTION = lvl -> 2 + 0.5 * lvl
constant IntLevelClosure AOE_FUNCTION = lvl -> 200 + 100 * lvl
constant IntLevelClosure MS_FUNCTION = lvl -> 40 + 20 * lvl


@compiletime function gen()
    let tgen = new AbilityTooltipGenerator(
        "Provides a burst of movement speed to the caster and nearby allied heroes."
    )
    new AbilityDefinitionBerserk(ID_STATIC)
    ..setHeroAbility(true)
    ..registerTooltipGenerator(tgen)

    ..tooltipStartListen()
    ..setName("Static")
    ..setLevels(3)
    ..presetCooldown(lvl -> 10. - lvl)
    ..presetManaCost((int lvl) -> 90 - 10 * lvl)
    ..addTooltipProperty("Boost Duration", DURATION_FUNCTION)
    ..addTooltipProperty("Area of Effect", AOE_FUNCTION)
    ..addTooltipProperty("Movespeed bonus (Initial)", MS_FUNCTION)
    ..tooltipStopListen(true)

    ..presetDamageTakenIncrease((int lvl) -> 0)
    ..presetMovementSpeedIncrease((int lvl) -> 0)
    ..presetButtonPosNormal(2, 2)
    ..presetButtonPosResearch(2, 0)
    ..presetHotkey("E")
    ..presetIcon(Icons.bTNPurge)
    ..presetAttackSpeedIncrease((int lvl) -> 0.)
    ..presetDurationHero(lvl -> 0.1)
    ..setLevelSkipRequirement(2)


init
    EventListener.onCast(ID_STATIC) caster ->
        let lvl = caster.getAbilityLevel(ID_STATIC)
        forUnitsInRange(caster.getPos(), AOE_FUNCTION.run(lvl).toReal()) uu ->
            if uu.isAllyOf(caster) and uu.isType(UNIT_TYPE_HERO) and uu.isAlive()
                uu.addMoveSpeedModifierWithLinearDecay(MS_FUNCTION.run(lvl).toReal(), 0., DURATION_FUNCTION.run(lvl).seconds())

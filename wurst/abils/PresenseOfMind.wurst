package PresenseOfMind

import ClosureEvents
import ClosureTimers
import HashMap

import AbilityTooltipGenerator


public constant ID_PRESENSE_OF_MIND = compiletime(ABIL_ID_GEN.next())
constant ID_PRESENSE_OF_MIND_DASH = compiletime(ABIL_ID_GEN.next())

constant IntLevelClosure MANA_COST_FUNCTION = lvl -> 110 - 10 * lvl

constant RealLevelClosure CAST_RANGE_FUNCTION = lvl -> 500. * lvl
constant RealLevelClosure COOLDOWN_FUNCTION = lvl -> 35. - 5 * lvl


@compiletime function gen()
    let tgen = new AbilityTooltipGenerator(
        "Hallucinates a copy at the target point. Can be re-cast to consume the copy, taking its place in the universe."
    )
    new ChannelAbilityPreset(ID_PRESENSE_OF_MIND, 3, true, tgen)
    ..setHeroAbility(true)
    ..presetButtonPosNormal(3, 2)
    ..presetButtonPosResearch(3, 0)
    ..presetHotkey("R")
    ..presetIcon(Icons.bTNCharm)
    ..setLevelSkipRequirement(2)
    ..setRequiredLevel(6)

    ..tooltipStartListen()
    ..presetTargetTypes(Targettype.POINT)
    ..presetManaCost(MANA_COST_FUNCTION)
    ..presetCastRange(CAST_RANGE_FUNCTION)
    ..setName("Presence of Mind")
    ..presetCooldown(COOLDOWN_FUNCTION)
    ..presetFollowThroughTime(lvl -> 1.0)
    ..presetDisableOtherAbilities((int lvl) -> true)
    ..tooltipStopListen()

    let tgen2 = new AbilityTooltipGenerator(
        "Consumes the presence of mind, taking its place in the universe."
    )
    new ChannelAbilityPreset(ID_PRESENSE_OF_MIND_DASH, 1, true, tgen2)
    ..setHeroAbility(false)
    ..presetButtonPosNormal(3, 2)
    ..presetButtonPosResearch(3, 0)
    ..presetHotkey("R")
    ..presetIcon(Icons.bTNWindWalkOn)

    ..tooltipStartListen()
    ..presetTargetTypes(Targettype.NONE)
    ..presetManaCost(lvl -> 0)
    ..setName("Presence of Mind")
    ..presetCooldown(lvl -> 1.)
    ..tooltipStopListen()


constant PRESENCE_OF_MINDS = new HashMap<unit, PresenceOfMind>()


class PresenceOfMind
    unit caster
    effect fx
    CallbackPeriodic animationCb

    construct(unit caster, vec2 target)
        this.caster = caster
        this.fx = addEffect("FacelessOneSorcerer.mdl", caster.getPos())..setYaw(caster.getFacingAngle())..playAnimation(ANIM_TYPE_SPELL, 0.25)..setColor(colorA(155, 155, 255, 155))..setColorByPlayer(caster.getOwner())
        this.animationCb = (CallbackPeriodic cb) ->
            this.fx..playAnimation(ANIM_TYPE_SPELL, 0.25)

        doPeriodically(4.5, this.animationCb)

        let vel = ZERO2.polarOffset(caster.getPos().angleTo(target), caster.getPos().distanceTo(target) * ANIMATION_PERIOD)
        PRESENCE_OF_MINDS.put(caster, this)

        doPeriodicallyTimed(ANIMATION_PERIOD, 1.) (CallbackCounted cb) ->
            this.fx.setPos(this.fx.getPos() + vel)

            if cb.isLast()
                this.caster..hideAbility(ID_PRESENSE_OF_MIND, true)..addAbility(ID_PRESENSE_OF_MIND_DASH)..setAbilityLevel(ID_PRESENSE_OF_MIND_DASH, this.caster.getAbilityLevel(ID_PRESENSE_OF_MIND))

    ondestroy
        this.fx..setAlpha(0)..destr()
        PRESENCE_OF_MINDS.remove(this.caster)
        destroy this.animationCb


init
    EventListener.onCast(ID_PRESENSE_OF_MIND) caster ->
        let targ = EventData.getSpellTargetPos()
        new PresenceOfMind(caster, targ)

    EventListener.onCast(ID_PRESENSE_OF_MIND_DASH) caster ->
        let presenceOfMind = PRESENCE_OF_MINDS.get(caster)

        let dist = caster.getPos().distanceTo(presenceOfMind.fx.getPos())
        let vel = ZERO2.polarOffset(caster.getPos().angleTo(presenceOfMind.fx.getPos()), dist * ANIMATION_PERIOD)
        doPeriodicallyTimed(ANIMATION_PERIOD, 1.) (CallbackCounted cb) ->
            caster.setXY(caster.getPos() + vel)

            if cb.isLast()
                presenceOfMind.caster..removeAbility(ID_PRESENSE_OF_MIND_DASH)..hideAbility(ID_PRESENSE_OF_MIND, false)
                destroy presenceOfMind

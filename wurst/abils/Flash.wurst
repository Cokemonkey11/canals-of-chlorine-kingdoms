package Flash

import ClosureEvents
import ClosureTimers
import HashMap
import OrderIds
import SoundUtils
import TerrainUtils

import AbilityTooltipGenerator

import Bind
import VecExtensions


public constant ID_FLASH = compiletime(ABIL_ID_GEN.next())

constant FLASH_DISJOINTS = new HashMap<unit, int>()

constant lastSmarts = new HashMap<unit, tile>()

constant FLASH_DISTANCE = 400.

constant ERROR_SOUND = new SoundDefinition(Sounds.error)


public function unit.getDisjointState() returns int
    if FLASH_DISJOINTS.has(this)
        return FLASH_DISJOINTS.get(this)

    FLASH_DISJOINTS.put(this, 0)

    return 0


public function unit.getLastSmart() returns vec2
    return (lastSmarts.has(this) ? lastSmarts.get(this) : ZERO2.getTile()).toVec2()


function unit.incrDisjointState()
    if FLASH_DISJOINTS.has(this)
        FLASH_DISJOINTS.put(this, FLASH_DISJOINTS.get(this) + 1)
    else
        FLASH_DISJOINTS.put(this, 1)


@compiletime function gen()
    let tgen2 = new AbilityTooltipGenerator(
        "Blinks a short distance in the direction of the "
        + "last".color(color(170, 0, 0))
        + " |cff919191right-click.|r"
    )
    new AbilityDefinitionWindWalk(ID_FLASH)
    ..registerTooltipGenerator(tgen2)
    ..setIconNormal(Icons.bTNBearBlink)
    ..setIconResearch(Icons.bTNBearBlink)
    ..setHeroAbility(false)

    ..tooltipStartListen()
    ..setLevels(1)
    ..setName("Flash")
    ..presetCooldown((int lvl) -> 60. - (15 * (lvl - 1)))
    ..addTooltipProperty("Range", (int lvl) -> FLASH_DISTANCE)
    ..tooltipStopListen(true)

    ..presetBackstabDamage(lvl -> false)
    ..presetMovementSpeedIncrease(lvl -> 0.)
    ..presetDurationHero(lvl -> 0.1)
    ..presetTransitionTime(lvl -> 0.)
    ..presetManaCost(int lvl -> 0)
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(1)
    ..presetHotkey("F")


init
    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
        let orderer = EventData.getTriggerUnit()
        let isSmart = EventData.getIssuedOrderId() == OrderIds.smart
        let target = EventData.getOrderPos()

        if isSmart
            lastSmarts.put(orderer, target.getTile())

    EventListener.onCast(ID_FLASH) (unit caster) ->
        let whereTo = caster.getLastSmart()
        let casterPos = caster.getPos()
        let casterPosZ = casterPos.getTerrainZ()
        let ang = casterPos.angleTo(whereTo)

        if caster.isBinded()
            ERROR_SOUND.playForPlayer(caster.getOwner())
            nullTimer() ->
                caster.resetAbilityCooldown(ID_FLASH)
        else
            var testPos = casterPos.polarOffset(ang, FLASH_DISTANCE)
            let offsIter = ZERO2.polarOffset(ang, 16.)
            var offs = FLASH_DISTANCE

            while offs >= 0. and (not testPos.isTerrainWalkable() or not testPos.isVisibileToPlayer(caster.getOwner()) or (casterPosZ - (testPos.getTerrainZ())).abs() > 80.)
                offs -= 16.
                testPos -= offsIter

            caster..setXY(testPos)..incrDisjointState()

            if caster.getCurrentOrder() == OrderIds.smart
                caster.issueImmediateOrderById(OrderIds.stunned)

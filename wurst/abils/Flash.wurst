package Flash

import ClosureEvents
import HashMap
import OrderIds
import TerrainUtils

import AbilityTooltipGenerator


public constant ID_FLASH = compiletime(ABIL_ID_GEN.next())

constant lastSmarts = new HashMap<unit, tile>()

constant FLASH_DISTANCE = 400.


@compiletime function gen()
    let tgen2 = new AbilityTooltipGenerator("Blinks a short distance in the direction of the " + "last".color(color(170, 0, 0)) + " |cff919191right-click.|r")
    new AbilityDefinitionWindWalk(ID_FLASH)
    ..registerTooltipGenerator(tgen2)
    ..setIconNormal(Icons.bTNBearBlink)
    ..setIconResearch(Icons.bTNBearBlink)
    ..setHeroAbility(false)

    ..tooltipStartListen()
    ..setLevels(1)
    ..setName("Flash")
    ..presetCooldown((int lvl) -> 60. - (15 * (lvl - 1)))
    ..addTooltipProperty("Range", (int lvl) -> FLASH_DISTANCE)
    ..tooltipStopListen(true)

    ..presetBackstabDamage(lvl -> false)
    ..presetMovementSpeedIncrease(lvl -> 0.)
    ..presetDurationHero(lvl -> 0.1)
    ..presetTransitionTime(lvl -> 0.)
    ..presetManaCost(int lvl -> 50)
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(1)
    ..presetHotkey("F")


init
    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER) ->
        let orderer = EventData.getTriggerUnit()
        let isSmart = EventData.getIssuedOrderId() == OrderIds.smart
        let target = EventData.getOrderPos()

        if isSmart
            lastSmarts.put(orderer, target.getTile())

    EventListener.onCast(ID_FLASH) (unit caster) ->
        let whereTo = (lastSmarts.has(caster) ? lastSmarts.get(caster) : ZERO2.getTile()).toVec2()
        let casterPos = caster.getPos()

        let ang = casterPos.angleTo(whereTo)
        let offsIter = ZERO2.polarOffset(ang, 16.)

        var offs = 0.
        var testPos = casterPos
        while offs <= FLASH_DISTANCE and testPos.isTerrainWalkable()
            testPos += offsIter
            offs += 16.

        caster.setXY(testPos)

package CallingVoid

import Abilities
import ClosureEvents
import ClosureForGroups
import ClosureTimers
import LinkedListModule

import CodeDamage
import VoidAnnihilator


constant DAMAGE_DELAY = 2.


class CallingVoid
    use LinkedListModule

    vec2 target
    unit caster
    real timeLeft

    static function damageFn(int level) returns real
        return 100. + 50 * level

    construct(unit caster, vec2 target)
        this.caster = caster
        this.target = target
        this.timeLeft = DAMAGE_DELAY

        if size == 1
            doPeriodically(ANIMATION_PERIOD) cb ->
                for void from staticItr()
                    void.tick()

                if size == 0
                    destroy cb

    function tick()
        this.timeLeft -= ANIMATION_PERIOD

        flashEffect(Abilities.glaiveMissileTarget, this.target.polarOffset(angle(GetRandomReal(0., 2. * PI)), 350.))

        if this.timeLeft <= 0.
            forUnitsInRange(this.target, 325.) u ->
                if u.isEnemyOf(this.caster) and u.isAlive() and not u.isInvulnerable()
                    this.caster.dealCodeDamage(u, damageFn(this.caster.getAbilityLevel(ID_CALLING_VOID)))
                    addEffect(Abilities.glaiveMissileTarget, u, "origin")..setColor(color(155, 155, 155))..setScale(1.5)..destr()

            destroy this

init
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_EFFECT) ->
        if EventData.getSpellAbilityId() == ID_CALLING_VOID
            let caster = EventData.getTriggerUnit()
            let target = EventData.getAbilityTargetPos()
            new CallingVoid(caster, target)
